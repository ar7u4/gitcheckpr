# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.


      - name: Detect Changed Folders in Last 15 Minutes
        id: detect-changes
        run: |
          # Fetch the latest changes
          git fetch --prune --unshallow

          # Get commit hashes from the last 15 minutes
          LAST_COMMITS=$(git log --since="15 minutes ago" --format="%H")

          if [ -z "$LAST_COMMITS" ]; then
            echo "No commits found in the last 15 minutes."
            exit 0
          fi

          # Detect all changed folders (with full paths) across the commits
          CHANGED_FOLDERS=$(echo "$LAST_COMMITS" | xargs -I {} git diff-tree --no-commit-id --name-only -r {} | grep '/' | awk -F'/' '{OFS="/"; $NF=""; print $0}' | sort -u)

          if [ -z "$CHANGED_FOLDERS" ]; then
            echo "No folders detected in the last 15 minutes."
            exit 0
          fi

          # Output the detected folder paths
          echo "Changed folders:"
          echo "$CHANGED_FOLDERS"

          # Save the changed folders into an environment variable for the next step
          echo "changed_folders=$CHANGED_FOLDERS" >> $GITHUB_ENV


      - name: Detect and Process Changed Folders 2
        run: |
          #!/bin/bash
          testing=$(git diff $(git log --reverse --since=midnight --pretty=format:"%h" | head -1) HEAD)
          echo "$testing"
